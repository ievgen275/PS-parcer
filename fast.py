from __future__ import annotations
import os, asyncio, time, logging, re
from typing import Any, Tuple
from dotenv import load_dotenv
from gologin import GoLogin
from urllib.parse import urlparse
import requests
from playwright.async_api import async_playwright, Page, Browser

# ---------- Config ----------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
RESULTS_DIR = os.path.join(BASE_DIR, 'results'); os.makedirs(RESULTS_DIR, exist_ok=True)
LOG_PATH = os.path.join(RESULTS_DIR, 'fastps_patchright_gologin.log')

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s [%(levelname)s] %(message)s',
                    handlers=[logging.FileHandler(LOG_PATH, encoding='utf-8'), logging.StreamHandler()])
logger = logging.getLogger(__name__)

load_dotenv()
# –¢–æ–∫–µ–Ω –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –∑–º—ñ–Ω–Ω–æ—é —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ GLOGIN_TOKEN, —ñ–Ω–∞–∫—à–µ –±–µ—Ä–µ—Ç—å—Å—è —Ü–µ–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
DEFAULT_GLOGIN_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODcxYTdjNjdlY2Y3NmE1ODkwZTg1ZTIiLCJ0eXBlIjoiZGV2Iiwiand0aWQiOiI2ODcxYTg0MWVjOTQyZWYzMTY4MTRlZjQifQ.jKv0hx7Vcd9A4-9ausX2tuQpZCcTpRx5FMGZyf95I_w"
GLOGIN_TOKEN = os.getenv('GLOGIN_TOKEN', DEFAULT_GLOGIN_TOKEN)
if not GLOGIN_TOKEN:
    logger.error('GLOGIN_TOKEN is empty'); exit(1)

PROXY_FILE = os.path.join(BASE_DIR, 'proxies.txt')
GOLOGIN_TMP = os.path.join(BASE_DIR, 'gologin_tmp'); os.makedirs(GOLOGIN_TMP, exist_ok=True)
FINAL_RESULTS_DIR = os.path.join(BASE_DIR, 'final_results')

# ---------- Setup proxy ----------
def load_first_proxy() -> str | None:
    if not os.path.exists(PROXY_FILE):
        return None
    with open(PROXY_FILE, encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            if '://' in line:
                return line
            parts = line.split(':')
            if len(parts) == 4:
                h, p, u, pwd = parts
                return f'http://{u}:{pwd}@{h}:{p}'
            if len(parts) == 2:
                h, p = parts
                return f'http://{h}:{p}'
    return None

# --------- Queue builder from final_results ----------
def build_queue() -> list[Tuple[str, str]]:
    tasks: list[Tuple[str, str]] = []
    if not os.path.isdir(FINAL_RESULTS_DIR):
        logger.warning('final_results directory not found');
        return tasks
    # 1) –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≥–ª—è–¥–∞—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥–∏ (—à—Ç–∞—Ç–∏)
    for entry in os.listdir(FINAL_RESULTS_DIR):
        p = os.path.join(FINAL_RESULTS_DIR, entry)
        targets: list[str] = []
        if os.path.isdir(p):
            # —É—Å—ñ .txt —Ñ–∞–π–ª–∏ —É –ø—ñ–¥–∫–∞—Ç–∞–ª–æ–∑—ñ
            targets.extend([os.path.join(p, fn) for fn in os.listdir(p) if fn.lower().endswith('.txt')])
        elif entry.lower().endswith('.txt'):
            # .txt —Ñ–∞–π–ª–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ FINAL_RESULTS_DIR
            targets.append(p)

        for txt_path in targets:
            addr = ''
            try:
                with open(txt_path, encoding='utf-8') as f:
                    for line in f:
                        ls = line.strip()
                        if ls.startswith('Address:'):
                            addr = ls.split(':', 1)[1].strip()
                        elif ls.startswith(('Owner:', 'Name:')) and addr:
                            name = ls.split(':', 1)[1].strip()
                            if name and addr:
                                tasks.append((name, addr)); addr = ''
            except Exception as e:
                logger.warning(f'Cannot parse {txt_path}: {e}')
    logger.info(f'Queue built: {len(tasks)} records')
    return tasks

# ---------- GoLogin  + Patchright startup ----------
async def start_patchright_with_gologin(proxy_url: str | None) -> Tuple[any, Browser, Page]:
    gl_api = GoLogin({'token': GLOGIN_TOKEN, 'profile_path': GOLOGIN_TMP})
    payload: dict[str, Any] = {
        'name': f'patchright_profile_{int(time.time())}',
        'os': 'win',
        'navigator': {'language': 'en-US', 'userAgent': 'random', 'resolution': 'random'},
        'proxyEnabled': bool(proxy_url),
    }
    if proxy_url:
        pr = urlparse(proxy_url)
        payload['proxy'] = {
            'mode': pr.scheme,
            'host': pr.hostname,
            'port': pr.port,
            'username': pr.username or '',
            'password': pr.password or '',
        }
    profile_id = gl_api.create(payload)
    gl = GoLogin({'token': GLOGIN_TOKEN, 'profile_id': profile_id, 'port': 3500, 'tmpdir': GOLOGIN_TMP})
    ws_endpoint = gl.start()
    if not ws_endpoint:
        raise RuntimeError('GoLogin did not return debuggerAddress')

    # Patchright –æ—á—ñ–∫—É—î http://host:port ‚Äî –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if ws_endpoint.startswith('ws://') or ws_endpoint.startswith('wss://'):
        pr = urlparse(ws_endpoint)
        cdp_url = f'http://{pr.hostname}:{pr.port}'
    elif ws_endpoint.startswith('http://') or ws_endpoint.startswith('https://'):
        cdp_url = ws_endpoint
    else:
        cdp_url = f'http://{ws_endpoint}'

    patchright = await async_playwright().start()
    browser = await patchright.chromium.connect_over_cdp(cdp_url)

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç/—Å—Ç–æ—Ä—ñ–Ω–∫—É GoLogin
    if browser.contexts:
        ctx = browser.contexts[0]
    else:
        ctx = await browser.new_context()

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ü—ñ–π–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏ –¥–ª—è Patchright
    await ctx.add_init_script("""
        // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ webdriver detection
        Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
        
        // –ü—ñ–¥–º—ñ–Ω—è—î–º–æ chrome runtime
        window.chrome = window.chrome || {};
        window.chrome.runtime = window.chrome.runtime || {};
        
        // –í–∏–¥–∞–ª—è—î–º–æ automation –æ–∑–Ω–∞–∫–∏
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
        
        // –ü—ñ–¥–º—ñ–Ω—è—î–º–æ plugins
        Object.defineProperty(navigator, 'plugins', {
            get: () => [1, 2, 3, 4, 5]
        });
        
        // –ü—ñ–¥–º—ñ–Ω—è—î–º–æ permissions
        const originalQuery = window.navigator.permissions.query;
        window.navigator.permissions.query = (parameters) => (
            parameters.name === 'notifications' ?
                Promise.resolve({ state: Notification.permission }) :
                originalQuery(parameters)
        );
    """)

    if ctx.pages:
        page = ctx.pages[0]
    else:
        page = await ctx.new_page()
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ü—ñ—ó
    await page.set_extra_http_headers({
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
    })
    
    return patchright, browser, page

# ---------- Turnstile helpers ----------
IFRAME_SEL = 'iframe[src*="challenges.cloudflare.com"], iframe[src*="turnstile"]'
SITEKEY_RE = re.compile(r'/(0x[\da-fA-F]{8,})/')

async def click_turnstile_checkbox(page: Page, timeout: int = 10000) -> bool:
    try:
        frame = await (await page.wait_for_selector(IFRAME_SEL, timeout=timeout)).content_frame()
        if not frame:
            return False
        cb = await frame.query_selector('input[type="checkbox"]') or \
             await frame.query_selector('label') or \
             await frame.query_selector('span')
        if cb:
            await cb.click()
            await page.wait_for_timeout(1500)
        token = await page.evaluate("document.querySelector('input[name=\'cf-turnstile-response\']')?.value||''")
        return bool(token and len(token) > 30)
    except Exception as e:
        logger.debug(f'click error: {e}')
        return False

# –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–π –∫–ª—ñ–∫ —É —á–µ–∫–±–æ–∫—Å (–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è Patchright)
async def brute_click_turnstile(page: Page, loops: int = 15) -> bool:
    """–ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∑–∞ loops —Å–ø—Ä–æ–± –∫–ª—ñ–∫–Ω—É–ª–∏ —á–µ–∫–±–æ–∫—Å —ñ –∑ º—è–≤–∏–≤—Å—è —Ç–æ–∫–µ–Ω."""
    logger.info('üéØ –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–π –∫–ª—ñ–∫ –ø–æ Turnstile (Patchright)...')
    
    for attempt in range(loops):
        await asyncio.sleep(1)
        
        # –®—É–∫–∞—î–º–æ –≤—Å—ñ Turnstile iframe'–∏
        turnstile_frames = []
        for frame in page.frames:
            if 'challenges.cloudflare.com' in frame.url and '/turnstile/' in frame.url:
                turnstile_frames.append(frame)
        
        if not turnstile_frames:
            logger.debug(f'–°–ø—Ä–æ–±–∞ {attempt + 1}: Turnstile iframe –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
            continue
            
        for frame in turnstile_frames:
            try:
                # –°–ø–æ—á–∞—Ç–∫—É —á–µ–∫–∞—î–º–æ —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è —á–µ–∫–±–æ–∫—Å
                logger.debug(f'–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å iframe {frame.url}')
                title = await frame.evaluate("document.title")
                has_checkbox = await frame.evaluate("""
                    document.querySelector('input[type="checkbox"], label, span[role="checkbox"], .cb-c') !== null
                """)
                
                if "Checking" in title or not has_checkbox:
                    logger.debug(f'iframe —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è: title="{title}", has_checkbox={has_checkbox}')
                    continue
                
                elem = await frame.frame_element()
                bb = await elem.bounding_box()
                if not bb:
                    continue
                
                # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∫–ª—ñ–∫—É (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è Turnstile)
                positions = [
                    (bb['x'] + 15, bb['y'] + bb['height'] * 0.5),                # –ö—Ä–∞–π–Ω—è –ª—ñ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
                    (bb['x'] + bb['width'] * 0.08, bb['y'] + bb['height'] * 0.5), # 8% —à–∏—Ä–∏–Ω–∏ (—á–µ–∫–±–æ–∫—Å)
                    (bb['x'] + bb['width'] * 0.12, bb['y'] + bb['height'] * 0.5), # 12% —à–∏—Ä–∏–Ω–∏
                    (bb['x'] + bb['width'] * 0.15, bb['y'] + bb['height'] * 0.5), # 15% —à–∏—Ä–∏–Ω–∏
                    (bb['x'] + 25, bb['y'] + bb['height'] * 0.4),                # –¢—Ä–æ—Ö–∏ –≤–∏—â–µ
                    (bb['x'] + 25, bb['y'] + bb['height'] * 0.6),                # –¢—Ä–æ—Ö–∏ –Ω–∏–∂—á–µ
                ]
                
                for x, y in positions:
                    logger.debug(f'–°–ø—Ä–æ–±–∞ {attempt + 1}: –∫–ª—ñ–∫ –≤ ({x:.1f}, {y:.1f})')
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à –ø—Ä–∏—Ä–æ–¥–Ω–∏–π –∫–ª—ñ–∫ –∑ —Ä–∞–Ω–¥–æ–º–Ω–∏–º–∏ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏
                    await page.mouse.move(x, y)
                    await page.wait_for_timeout(100 + int(time.time() * 1000) % 200)  # —Ä–∞–Ω–¥–æ–º–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                    await page.mouse.click(x=x, y=y)
                    await page.wait_for_timeout(2000)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ–∫—É
                    token = await page.evaluate("document.querySelector('input[name=\"cf-turnstile-response\"]')?.value||''")
                    logger.debug(f'–¢–æ–∫–µ–Ω –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É: {token[:50] if token else "–ø—É—Å—Ç–∏–π"}...')
                    if token and len(token) > 30:
                        logger.info('üéâ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–º –∫–ª—ñ–∫–æ–º!')
                        return True
                        
            except Exception as e:
                logger.debug(f'–°–ø—Ä–æ–±–∞ {attempt + 1} –ø–æ–º–∏–ª–∫–∞: {e}')
    
    logger.warning('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–π –∫–ª—ñ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤')
    return False

# ---------- Cloudflare managed challenge wait helper ----------
async def wait_for_cf_challenge(page: Page, max_sec: int = 40) -> bool:
    """–ß–µ–∫–∞—î, –ø–æ–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –∫–ª–∞—Å–æ–º page-manage-challenge (Just a moment‚Ä¶) –∑–Ω–∏–∫–Ω–µ.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∑–∞ max_sec –º–∏ –ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –±–µ–∑ —Ü—å–æ–≥–æ –∫–ª–∞—Å—É."""
    start = time.time()
    while time.time() - start < max_sec:
        try:
            cls = await page.evaluate("document.documentElement.className")
        except Exception:
            cls = ''
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ challenge —â–µ –∞–∫—Ç–∏–≤–Ω–∏–π
        if cls and 'page-manage-challenge' in cls:
            logger.debug(f'‚è≥ Challenge –∞–∫—Ç–∏–≤–Ω–∏–π, —á–µ–∫–∞—î–º–æ... ({int(time.time() - start)}s)')
            
            # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —â–æ —î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ  
            try:
                elements_info = await page.evaluate("""
                    (() => {
                        const info = {
                            hasTurnstileInput: !!document.querySelector('input[name="cf-turnstile-response"]'),
                            turnstileValue: document.querySelector('input[name="cf-turnstile-response"]')?.value || '',
                            hasMainWrapper: !!document.querySelector('.main-wrapper'),
                            iframes: Array.from(document.querySelectorAll('iframe')).map(iframe => iframe.src)
                        };
                        return info;
                    })()
                """)
                logger.debug(f'üìã –°—Ç–∞–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {elements_info}')
                
                # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –≤–∂–µ –∑'—è–≤–∏–≤—Å—è - challenge –ø—Ä–æ–π–¥–µ–Ω–æ
                if elements_info.get('turnstileValue') and len(elements_info['turnstileValue']) > 30:
                    logger.info('üéâ Challenge –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ!')
                    return True
                
                # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ Turnstile iframe'–∏
                turnstile_found = False
                for frame in page.frames:
                    if 'challenges.cloudflare.com' in frame.url and '/turnstile/' in frame.url:
                        logger.info(f'üîç –ó–Ω–∞–π—à–ª–∏ Turnstile iframe: {frame.url}')
                        turnstile_found = True
                        
                        try:
                            # –°–ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–≥–Ω–æ—Å—Ç—É—î–º–æ —â–æ —î –≤ iframe
                            iframe_content = await frame.evaluate("""
                                (() => {
                                    const info = {
                                        html: document.documentElement.outerHTML.substring(0, 1000),
                                        allElements: Array.from(document.querySelectorAll('*')).map(el => ({
                                            tag: el.tagName,
                                            id: el.id,
                                            className: el.className,
                                            text: el.textContent?.substring(0, 50)
                                        })).slice(0, 20),
                                        inputs: Array.from(document.querySelectorAll('input')).map(inp => ({
                                            type: inp.type,
                                            id: inp.id,
                                            className: inp.className
                                        })),
                                        clickableElements: Array.from(document.querySelectorAll('label, button, span, div')).filter(el => 
                                            el.textContent?.includes('human') || 
                                            el.textContent?.includes('verify') ||
                                            el.getAttribute('role') === 'checkbox' ||
                                            el.className?.includes('checkbox') ||
                                            el.className?.includes('cb-')
                                        ).map(el => ({
                                            tag: el.tagName,
                                            text: el.textContent?.substring(0, 50),
                                            className: el.className,
                                            role: el.getAttribute('role')
                                        }))
                                    };
                                    return info;
                                })()
                            """)
                            logger.info(f'üîç –í–º—ñ—Å—Ç iframe: {iframe_content}')
                            
                            # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ iframe –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è –ø–æ–≤–Ω—ñ—Å—Ç—é
                            try:
                                # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –∑–Ω–∏–∫–Ω–µ "Checking your Browser‚Ä¶" —ñ –∑'—è–≤–∏—Ç—å—Å—è —á–µ–∫–±–æ–∫—Å
                                logger.info('‚è≥ –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Turnstile —á–µ–∫–±–æ–∫—Å—É...')
                                for wait_attempt in range(20):  # –î–æ 20 —Å–µ–∫—É–Ω–¥
                                    title = await frame.evaluate("document.title")
                                    has_checkbox = await frame.evaluate("""
                                        document.querySelector('input[type="checkbox"], label, span[role="checkbox"], .cb-c') !== null
                                    """)
                                    
                                    logger.debug(f'–°–ø—Ä–æ–±–∞ {wait_attempt + 1}: title="{title}", has_checkbox={has_checkbox}')
                                    
                                    if has_checkbox and "Checking" not in title:
                                        logger.info('‚úÖ Turnstile —á–µ–∫–±–æ–∫—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!')
                                        break
                                    
                                    await page.wait_for_timeout(1000)
                                else:
                                    logger.warning('‚ö†Ô∏è Turnstile —á–µ–∫–±–æ–∫—Å –Ω–µ –∑\'—è–≤–∏–≤—Å—è –∑–∞ 20 —Å–µ–∫—É–Ω–¥')
                                    
                            except Exception as e:
                                logger.warning(f'‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —á–µ–∫–±–æ–∫—Å—É: {e}')
                            
                            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å—É
                            selectors = [
                                'input[type="checkbox"]',
                                'label',
                                'span[role="checkbox"]',
                                'div[role="checkbox"]',
                                '.cb-c',
                                '[data-testid="checkbox"]',
                                'span:contains("human")',
                                'label:contains("human")', 
                                'div:contains("Verify")',
                                '*[class*="checkbox"]',
                                '*[class*="cb-"]'
                            ]
                            
                            checkbox_clicked = False
                            for selector in selectors:
                                try:
                                    checkbox = await frame.query_selector(selector)
                                    if checkbox:
                                        logger.info(f'üéØ –ó–Ω–∞–π—à–ª–∏ —ñ –∫–ª—ñ–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç ({selector}) –≤ iframe...')
                                        # –ë—ñ–ª—å—à –ø—Ä–∏—Ä–æ–¥–Ω–∏–π –∫–ª—ñ–∫ –∑ —Ä—É—Ö–æ–º –º–∏—à—ñ
                                        box = await checkbox.bounding_box()
                                        if box:
                                            await page.mouse.move(box['x'] + box['width']/2, box['y'] + box['height']/2)
                                            await page.wait_for_timeout(50 + int(time.time() * 1000) % 100)
                                        await checkbox.click()
                                        await page.wait_for_timeout(3000)
                                        checkbox_clicked = True
                                        break
                                except Exception as e:
                                    logger.debug(f'–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}')
                            
                            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —á–µ–∫–±–æ–∫—Å, –ø—Ä–æ–±—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–π –∫–ª—ñ–∫
                            if not checkbox_clicked:
                                logger.info('üéØ –ü—Ä–æ–±—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–π –∫–ª—ñ–∫ –≤ iframe...')
                                iframe_element = await frame.frame_element()
                                if iframe_element:
                                    box = await iframe_element.bounding_box()
                                    if box:
                                        # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
                                        positions = [
                                            (box['x'] + 25, box['y'] + box['height'] * 0.5),  # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞
                                            (box['x'] + box['width'] * 0.15, box['y'] + box['height'] * 0.5),
                                            (box['x'] + box['width'] * 0.3, box['y'] + box['height'] * 0.5),
                                        ]
                                        
                                        for x, y in positions:
                                            logger.info(f'üéØ –ö–ª—ñ–∫ –≤ –ø–æ–∑–∏—Ü—ñ—é ({x:.0f}, {y:.0f})')
                                            await page.mouse.move(x, y)
                                            await page.wait_for_timeout(50 + int(time.time() * 1000) % 100)
                                            await page.mouse.click(x, y)
                                            await page.wait_for_timeout(2000)
                                            
                                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ–∫—É
                                            token = await page.evaluate("document.querySelector('input[name=\"cf-turnstile-response\"]')?.value || ''")
                                            if token and len(token) > 30:
                                                logger.info('üéâ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–º –∫–ª—ñ–∫–æ–º!')
                                                return True
                                        
                                        checkbox_clicked = True
                            
                            if checkbox_clicked:
                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑'—è–≤–∏–≤—Å—è —Ç–æ–∫–µ–Ω
                                for _ in range(10):  # –ß–µ–∫–∞—î–º–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥
                                    token = await page.evaluate("document.querySelector('input[name=\"cf-turnstile-response\"]')?.value || ''")
                                    if token and len(token) > 30:
                                        logger.info('üéâ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É!')
                                        return True
                                    await page.wait_for_timeout(1000)
                        
                        except Exception as e:
                            logger.debug(f'–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ Turnstile iframe: {e}')
                
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ Turnstile, –∞–ª–µ —î input - –º–æ–∂–ª–∏–≤–æ challenge –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π
                if not turnstile_found and elements_info.get('hasTurnstileInput'):
                    logger.info('ü§î Turnstile input –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ iframe –≤—ñ–¥—Å—É—Ç–Ω—ñ–π - –º–æ–∂–ª–∏–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π challenge')
                    # –ß–µ–∫–∞—î–º–æ —â–µ —Ç—Ä–æ—Ö–∏
                    await page.wait_for_timeout(3000)
                
            except Exception as e:
                logger.debug(f'–ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}')
        
        else:
            # Challenge –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            logger.info('‚úÖ Challenge –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—å')
            return True
            
        await page.wait_for_timeout(1000)
    
    logger.error(f'‚ùå Challenge –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑–∞ {max_sec} —Å–µ–∫—É–Ω–¥')
    return False

async def valid_capha(page: Page):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î Turnstile (—Å–ø–æ—á–∞—Ç–∫—É)
    await page.reload()
    has_turnstile = await page.query_selector('input[name="cf-turnstile-response"]') is not None
    if has_turnstile:
        logger.info('‚è≥ –í–∏—è–≤–ª–µ–Ω–æ Cloudflare Turnstile, –æ–±—Ä–æ–±–ª—è—î–º–æ...')
        if not await wait_for_cf_challenge(page, max_sec=45):
            logger.warning('‚ùå Challenge –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è')
            return False
        logger.info('‚úÖ Turnstile –ø—Ä–æ–π–¥–µ–Ω–æ!')
        # –î–æ—á–µ–∫–∞—Ç–∏—Å—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        await page.wait_for_timeout(15000)

# ---------- Task runner ----------
async def run_single(page: Page, name: str, address: str, idx: int) -> bool:
    logger.info(f'üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ FastPeopleSearch...')
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑ –æ–±—Ä–æ–±–∫–æ—é timeout
    max_retries = 3
    for attempt in range(max_retries):
        try:
            logger.info(f'üîÑ –°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏...')
            await page.goto('https://www.fastpeoplesearch.com/', wait_until='domcontentloaded', timeout=30000)
            await page.wait_for_timeout(60000)
            logger.info('‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!')
            break
        except Exception as e:
            logger.warning(f'‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1} –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}')
            if attempt == max_retries - 1:
                logger.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±')

                # –°–ø—Ä–æ–±—É—î–º–æ —Å–ø—Ä–æ—Å—Ç–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                try:
                    logger.info('üîÑ –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è load...')
                    await page.goto('https://www.fastpeoplesearch.com/', wait_until='domcontentloaded', timeout=30000)
                    logger.info('‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ domcontentloaded!')
                    break
                except Exception as e2:
                    logger.error(f'‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e2}')
                    return False
            else:
                await page.wait_for_timeout(5000)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é


    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await page.wait_for_timeout(60000)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    try:
        await page.wait_for_load_state('networkidle', timeout=10000)
    except Exception as e:
        logger.warning(f'‚ö†Ô∏è NetworkIdle timeout: {e}')

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ cookie-banner, —è–∫—â–æ —î
    try:
        btn = await page.query_selector('button:text("I AGREE")')
        if btn:
            logger.info('üç™ –ó–∞–∫—Ä–∏–≤–∞—î–º–æ cookie banner')
            await btn.click()
            await page.wait_for_timeout(1000)
    except Exception:
        pass

    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —â–æ —î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    try:
        title = await page.title()
        url = page.url
        logger.info(f'üìã –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {title} | {url}')

        await valid_capha(page)

        # –¢–µ–ø–µ—Ä —à—É–∫–∞—î–º–æ –ø–æ–ª—è —Ñ–æ—Ä–º–∏ (–ø—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è Turnstile)
        search_input = None
        # –ó –ª–æ–≥—ñ–≤ –∑–Ω–∞—î–º–æ —â–æ –ø–æ–ª–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è "searchfaker-input"
        selectors = [
            'input[name="searchfaker-input"]',
            'input[id="searchfaker-input"]',
            'input[placeholder*="Search"]',
            'input[name="name"]',  # –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
            'input[name="search"]'
        ]

        for selector in selectors:
            search_input = await page.query_selector(selector)
            if search_input:
                logger.info(f'‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É: {selector}')
                break

        if not search_input:
            logger.error('‚ùå –ü–æ–ª–µ –ø–æ—à—É–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è Turnstile')
            await page.screenshot(path=f'error_no_search_{idx}.png')
            return False
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —î–¥–∏–Ω–µ –ø–æ–ª–µ –ø–æ—à—É–∫—É
        logger.info(f'üìù –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ—à—É–∫')
        await page.locator('#search-name-name').fill(f'{name}')
        await page.locator('#search-name-address').fill(f'{address}')
        await page.keyboard.press('Enter')
        
    except Exception as e:
        logger.error(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ —Ñ–æ—Ä–º–∏: {e}')
        await page.screenshot(path=f'error_form_fill_{idx}.png')
        return False

    #Valid capha after enter name and adress
    try:
        logger.info('Validation capha on the page...')
        await valid_capha(page)
    except Exception:
        logger.info('Capha is not found')

    # # –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
    # try:
    #     await page.wait_for_load_state('networkidle', timeout=15000)
    #     logger.info('üìã –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—à—É–∫—É...')
    # except Exception:
    #     logger.debug('NetworkIdle timeout –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É')
    #
    # await page.wait_for_timeout(3000)
    # await page.screenshot(path=f'patchright_gl_{idx}.png')
    # logger.info(f'Screenshot patchright_gl_{idx}.png saved')
    return True

# ---------- main ----------
async def main():
    tasks = build_queue()
    proxy_url = load_first_proxy()
    while True:
        patchright, browser, page = await start_patchright_with_gologin(proxy_url)
        try:
            for idx, (n, a) in enumerate(tasks, 1):
                if idx % 5 == 0:
                    break
                logger.info(f'‚ñ∂Ô∏è {idx}/{len(tasks)} {n} | {a}')
                ok = await run_single(page, n, a, idx)
                if not ok:
                    break
        finally:
            await browser.close()
            await patchright.stop()

if __name__ == '__main__':
    asyncio.run(main())